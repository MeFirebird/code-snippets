一：前言 Pre
1.typeof在两种情况下会返回"undefined":一个变量没有被声明的时候,和一个变量的值是undefined的时候.
  所以判断一个
2.isDefined() (比如Object.isDefined()): 可以作为一个函数或者一个运算符
  function isDefined(x) {
    return x !== null && x !== undefined;
}
3.undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）
  typeof原声数据类型的结果？　　
4.数据类型　　大小写？　　　　drag API 
5.node中alert有用吗？　　试试





function jsonToXml(json){
	        //  值和类型都是undefined   或    值为null     变量的值为undefined null，这说明什么？！！！！
		if(typeof json ==="undefined" || json === null || Object.keys(json).length === 0){
				return "";
		}
}
	
function translator(json) {
		let props = Object.keys(json).reduce((acc, cur) => {
			if(cur !== 'type' && cur !== 'child') {
				// 处理Style类型
				// 这里双引号做了一个简单的转义
				if(cur === 'style') {
					return acc += ` :${cur != "ctype" ? cur : "type"}="${swapStr(JSON.stringify(json[cur]),'"',"'")}"`;
				}

				if(cur === 'events') {
					for(const key in json[cur]) {
						acc += ` @${key}='onEventTrigger($event,${JSON.stringify(json[cur][key])})' `;
					}
					return acc;
				}

				// number型和boolean型绑定数据的特殊处理
				else if(_.isNumber(json[cur]) || _.isBoolean(json[cur])) {
					return acc += ` :${cur != "ctype" ? cur : "type"}=${json[cur]}`;
				} else {
					return acc += ` ${cur != "ctype" ? cur : "type"}="${json[cur]}"`;
				}
			}

			return acc;
		}, "");
		if(typeof json.child !== "undefined" && json.child.length !== 0) {
			return `<${json.type}${props}>
                    ${json.child.map(i => translator(i)).reduce((acc, cur) => acc += cur, "")}
                </${json.type}>`;
		} else {
			if(json.type === 'Text') {
				return `${json.text}`;
			}
			if(json.type === 'text') {
				return `<span ${props} data-type=${json.type} draggable="true">${json.text}</span>`;
			}
			return `<${json.type}${props} data-_id=${json._id} data-type=${json.type} draggable="true"></${json.type}>`;
		}
	}
	


function jsonToXml(json) {
	// typeof为undefined null ？　代表什么？    typeof会返回null？
	if(typeof json === "undefined" || json === null || Object.keys(json).length === 0) {
		return "";
	}

	function translator(json) {
		// reduce(function,"")  "":callback第一次执行的第一个参数
		let props = Object.keys(json).reduce((acc, cur) => {
			if(cur !== 'type' && cur !== 'child') {
				// 处理Style类型
				// 这里双引号做了一个简单的转义
				if(cur === 'style') {
					return acc += ` :${cur != "ctype" ? cur : "type"}="${swapStr(JSON.stringify(json[cur]),'"',"'")}"`;
				}

				if(cur === 'events') {
					for(const key in json[cur]) {
						acc += ` @${key}='onEventTrigger($event,${JSON.stringify(json[cur][key])})' `;
					}
					return acc;
				}

				// number型和boolean型绑定数据的特殊处理
				else if(_.isNumber(json[cur]) || _.isBoolean(json[cur])) {
					return acc += ` :${cur != "ctype" ? cur : "type"}=${json[cur]}`;
				} else {
					return acc += ` ${cur != "ctype" ? cur : "type"}="${json[cur]}"`;
				}
			}

			return acc;
		}, "");
		if(typeof json.child !== "undefined" && json.child.length !== 0) {
			return `<${json.type}${props}>
                    ${json.child.map(i => translator(i)).reduce((acc, cur) => acc += cur, "")}
                </${json.type}>`;
		} else {
			if(json.type === 'Text') {
				return `${json.text}`;
			}
			if(json.type === 'text') {
				return `<span ${props} data-type=${json.type} draggable="true">${json.text}</span>`;
			}
			return `<${json.type}${props} data-_id=${json._id} data-type=${json.type} draggable="true"></${json.type}>`;
		}
	}

	let xml = translator(json);
	return xml;
}

function swapStr(str, substr1, substr2) {
	return str.replace(new RegExp(`(${substr1})|(${substr2})`, "g"), function(match, $1, $2) {
		if(typeof $1 !== "undefined") {
			return substr2;
		} else {
			return substr1;
		}
	});
}
	
